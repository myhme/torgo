version: '3.8'

services:
  torgo:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: torgo_service
    # NET_ADMIN capability is required for the transparent proxy mode.
    # It allows the entrypoint script to manipulate network rules with iptables.
    cap_add:
      - NET_ADMIN
      - IPC_LOCK
    security_opt:
      - no-new-privileges:true
    read_only: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      core: 0
    tmpfs:
      - /var/lib/tor:rw,noexec,nosuid,nodev,size=512m,mode=0700
      - /run:rw,exec,nosuid,nodev,size=64m,mode=0755
      - /var/log:rw,nosuid,nodev,size=64m,mode=0755
      - /tmp:rw,nosuid,nodev,size=128m,mode=1777
    ports:
      - "${API_PORT:-8080}:8080"
      - "${COMMON_SOCKS_PROXY_PORT:-9000}:9000"
      - "${COMMON_DNS_PROXY_PORT:-5300}:5300/tcp"
      - "${COMMON_DNS_PROXY_PORT:-5300}:5300/udp"
      - "${PRIVOXY_HTTP_PORT:-8118}:8118"
    environment:
      # --- Core torgo & Proxy Configuration ---
      - TOR_INSTANCES=${TOR_INSTANCES:-3}
      - API_PORT=${API_PORT:-8080}
      - COMMON_SOCKS_PROXY_PORT=${COMMON_SOCKS_PROXY_PORT:-9000}
      - COMMON_DNS_PROXY_PORT=${COMMON_DNS_PROXY_PORT:-5300}
      - PRIVOXY_HTTP_PORT=${PRIVOXY_HTTP_PORT:-8118}

      # --- Feature Configuration ---
      - GRACEFUL_ROTATION_TIMEOUT_SECONDS=${GRACEFUL_ROTATION_TIMEOUT_SECONDS:-120}
      - HEALTH_CHECK_INTERVAL_SECONDS=${HEALTH_CHECK_INTERVAL_SECONDS:-45}
      - IP_DIVERSITY_CHECK_INTERVAL_SECONDS=${IP_DIVERSITY_CHECK_INTERVAL_SECONDS:-300}
      - AUTO_ROTATE_CIRCUIT_INTERVAL_SECONDS=${AUTO_ROTATE_CIRCUIT_INTERVAL_SECONDS:-3600}
      - DNS_CACHE_ENABLED=${DNS_CACHE_ENABLED:-true}

      # --- Privacy/Security & Binding ---
      - API_BIND_ADDR=${API_BIND_ADDR:-0.0.0.0}
      - TORGO_SOCKS_BIND_ADDR=${TORGO_SOCKS_BIND_ADDR:-0.0.0.0}
      - TORGO_DNS_BIND_ADDR=${TORGO_DNS_BIND_ADDR:-0.0.0.0}
      - TORGO_LAN_CIDR=${TORGO_LAN_CIDR:-}
      - TORGO_ALLOW_PRIVATE_DEST=${TORGO_ALLOW_PRIVATE_DEST:-false}
      
      # --- NEW: Transparent Proxy Mode ---
      # Set to "true" to enable the transparent gateway.
      # Client containers using 'network_mode: service:torgo' will have all traffic
      # automatically routed through Tor without any client-side configuration.
      - TORGO_TRANSPARENT_PROXY=true

      # --- Dynamic Service Configuration (Optional) ---
      # - PRIVOXY_LOG_LEVEL=1
      # - TOR_EXIT_NODES={us},{gb}
      # - TOR_MAX_CIRCUIT_DURTINESS=900

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/docker-healthcheck.sh"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # --- Example Client Container ---
  # To use the transparent gateway, set the network_mode to "service:torgo".
  # This makes the client share the same network as torgo, allowing its traffic
  # to be automatically captured and redirected.
  client_app:
    image: alpine
    container_name: torgo_client_example
    depends_on:
      - torgo
    network_mode: "service:torgo"
    # Note: With transparent proxying, curl needs NO proxy flags.
    # The network itself forces the traffic through Tor.
    command: >
      sh -c "apk add --no-cache curl &&
             echo 'Client container started in transparent mode.' &&
             while true; do
               echo -n '[\"client_app\" via transparent proxy] My IP is: ';
               curl --silent https://check.torproject.org/api/ip;
               echo;
               sleep 10;
             done"