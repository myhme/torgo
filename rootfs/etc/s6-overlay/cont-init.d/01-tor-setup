#!/usr/bin/with-contenv bash
# S6 Overlay cont-init script for setting up Tor instances and their S6 services,
# and listing all user services for S6.

set -e # Exit on error
set -o pipefail # Causes pipelines to fail if any command fails

echo "--- S6 Cont-init: 01-tor-setup starting ---"

# Defaults (should match Go config defaults if ENV not set)
TOR_INSTANCES_DEFAULT=1
SOCKS_BASE_PORT_DEFAULT=9050
CONTROL_BASE_PORT_DEFAULT=9160
DNS_BASE_PORT_DEFAULT=9200

TOR_USER="_tor"
TOR_DATA_BASE_DIR="/var/lib/tor"
TOR_RUN_DIR="/var/run/tor" # Tor might not use this if not daemonized by S6
TORRC_TEMPLATE="/etc/tor/torrc.template"
TORRC_DIR="/etc/tor"

# Ensure _tor user and group exist (apk add tor should create them)
if ! getent group _tor > /dev/null; then echo "Creating group _tor"; addgroup -S _tor; fi
if ! getent passwd _tor > /dev/null; then echo "Creating user _tor"; adduser -S -G _tor -h /var/lib/tor -s /sbin/nologin _tor; fi

mkdir -p "${TOR_RUN_DIR}" "${TOR_DATA_BASE_DIR}" "${TORRC_DIR}"
chown _tor:_tor "${TOR_RUN_DIR}" "${TOR_DATA_BASE_DIR}"
chmod 700 "${TOR_RUN_DIR}" "${TOR_DATA_BASE_DIR}"

N_INSTANCES=${TOR_INSTANCES:-$TOR_INSTANCES_DEFAULT}
if ! [[ "$N_INSTANCES" =~ ^[0-9]+$ ]] || [ "$N_INSTANCES" -lt 1 ]; then
    echo "Warning: Invalid TOR_INSTANCES value: '$N_INSTANCES'. Defaulting to $TOR_INSTANCES_DEFAULT."
    N_INSTANCES=$TOR_INSTANCES_DEFAULT
fi

SOCKS_BASE=${SOCKS_BASE_PORT_CONFIGURED:-$SOCKS_BASE_PORT_DEFAULT}
CONTROL_BASE=${CONTROL_BASE_PORT_CONFIGURED:-$CONTROL_BASE_PORT_DEFAULT}
DNS_BASE=${DNS_BASE_PORT_CONFIGURED:-$DNS_BASE_PORT_DEFAULT}

USER_SERVICES_CONTENTS_DIR="/etc/s6-overlay/s6-rc.d/user/contents.d"
mkdir -p "${USER_SERVICES_CONTENTS_DIR}"
ALL_USER_SERVICES_FILE="${USER_SERVICES_CONTENTS_DIR}/all-user-services"

rm -f "${ALL_USER_SERVICES_FILE}" # Clear if exists
touch "${ALL_USER_SERVICES_FILE}"
chmod 644 "${ALL_USER_SERVICES_FILE}"

# Add core static services to the list
echo "svc-torgo-app" >> "${ALL_USER_SERVICES_FILE}"
echo "svc-privoxy" >> "${ALL_USER_SERVICES_FILE}"
echo "--- S6 Cont-init: Added core services (svc-torgo-app, svc-privoxy) to ${ALL_USER_SERVICES_FILE} ---"

echo "--- S6 Cont-init: Setting up ${N_INSTANCES} Tor S6 services ---"

for i in $(seq 1 "${N_INSTANCES}"); do
  INSTANCE_ID_STR=$(printf "%02d" "$i")
  INSTANCE_S6_SERVICE_NAME="svc-tor-instance${INSTANCE_ID_STR}"
  
  DATA_DIR="${TOR_DATA_BASE_DIR}/instance${i}"
  PID_FILE="${TOR_RUN_DIR}/tor.instance${i}.pid" 
  TORRC_FILE="${TORRC_DIR}/torrc.instance${i}"

  CURRENT_SOCKS_PORT=$((SOCKS_BASE + i))
  CURRENT_CONTROL_PORT=$((CONTROL_BASE + i))
  CURRENT_DNS_PORT=$((DNS_BASE + i))

  echo "Configuring Tor instance ${i} (S6 service: ${INSTANCE_S6_SERVICE_NAME})"

  mkdir -p "${DATA_DIR}"
  chown -R _tor:_tor "${DATA_DIR}"
  chmod 700 "${DATA_DIR}"

  sed -e "s|__DATADIR__|${DATA_DIR}|g" \
      -e "s|__SOCKSPORT__|127.0.0.1:${CURRENT_SOCKS_PORT}|g" \
      -e "s|__CONTROLPORT__|127.0.0.1:${CURRENT_CONTROL_PORT}|g" \
      -e "s|__DNSPORT__|127.0.0.1:${CURRENT_DNS_PORT}|g" \
      -e "s|__PIDFILE__|${PID_FILE}|g" \
      "${TORRC_TEMPLATE}" > "${TORRC_FILE}"
  chmod 644 "${TORRC_FILE}"

  INSTANCE_SERVICE_DIR_PATH="/etc/s6-overlay/s6-rc.d/${INSTANCE_S6_SERVICE_NAME}"
  mkdir -p "${INSTANCE_SERVICE_DIR_PATH}/data" # For any persistent service data if needed by S6 for this service
  mkdir -p "${INSTANCE_SERVICE_DIR_PATH}/log"   # For the log service

  # Create the run script for this Tor instance S6 service
  cat <<RUNNER > "${INSTANCE_SERVICE_DIR_PATH}/run"
#!/command/execlineb -P
foreground { echo "--- S6: Starting Tor instance ${i} (config: ${TORRC_FILE}) ---" }
# Tor should not daemonize itself; S6 handles that.
# The torrc file should have 'Log notice stdout' or similar.
su-exec _tor tor -f ${TORRC_FILE}
RUNNER
  chmod +x "${INSTANCE_SERVICE_DIR_PATH}/run"

  # Create an optional finish script
  cat <<FINISHER > "${INSTANCE_SERVICE_DIR_PATH}/finish"
#!/usr/bin/execlineb -P
# \$1 is the exit code, \$2 is the signal number (if any)
foreground { echo "--- S6: Tor instance ${i} stopped. Exit code: \$1, Signal: \$2 ---" }
# Prevent rapid flapping if Tor crashes immediately on startup
sleep 2
FINISHER
  chmod +x "${INSTANCE_SERVICE_DIR_PATH}/finish"

  # Create the log run script for this Tor instance
  cat <<LOGRUNNER > "${INSTANCE_SERVICE_DIR_PATH}/log/run"
#!/bin/sh
# Simple logger: pipe service stdout/stderr to this script's stdout (which Docker captures)
exec cat
LOGRUNNER
  chmod +x "${INSTANCE_SERVICE_DIR_PATH}/log/run"

  # Tell S6 to manage this service (longrun service)
  touch "${INSTANCE_SERVICE_DIR_PATH}/up"

  # Add this dynamically created Tor service name to the list
  echo "${INSTANCE_S6_SERVICE_NAME}" >> "${ALL_USER_SERVICES_FILE}"
done

echo "--- S6 Cont-init: Waiting for all Tor control cookies ---"
ALL_COOKIES_READY=0
WAIT_ATTEMPTS=0
MAX_WAIT_ATTEMPTS=120

while [ "${ALL_COOKIES_READY}" -eq 0 ] && [ "${WAIT_ATTEMPTS}" -lt "${MAX_WAIT_ATTEMPTS}" ]; do
    ALL_COOKIES_READY=1
    for i in $(seq 1 "${N_INSTANCES}"); do
        COOKIE_PATH="${TOR_DATA_BASE_DIR}/instance${i}/control_auth_cookie"
        if [ ! -f "${COOKIE_PATH}" ]; then
            ALL_COOKIES_READY=0
            break
        fi
    done
    if [ "${ALL_COOKIES_READY}" -eq 0 ]; then
        sleep 1
        WAIT_ATTEMPTS=$((WAIT_ATTEMPTS + 1))
        if [ $((WAIT_ATTEMPTS % 10)) -eq 0 ]; then
             echo "S6 Cont-init: Still waiting for Tor cookies... (Attempt ${WAIT_ATTEMPTS}/${MAX_WAIT_ATTEMPTS})"
        fi
    fi
done

if [ "${ALL_COOKIES_READY}" -eq 0 ]; then
    echo "S6 Cont-init FATAL: Not all Tor control cookies found after ${MAX_WAIT_ATTEMPTS} seconds."
    for i in $(seq 1 "${N_INSTANCES}"); do ls -la "${TOR_DATA_BASE_DIR}/instance${i}/"; done
    exit 1
fi

echo "--- S6 Cont-init: All Tor control cookies found. Tor setup complete. ---"
echo "--- S6 Cont-init: Final user services list in ${ALL_USER_SERVICES_FILE}: ---"
cat "${ALL_USER_SERVICES_FILE}"
echo "----------------------------------------------------------------------"

exit 0
